import{_ as t,c as e,o as d,a4 as o}from"./chunks/framework.4aTu-Nia.js";const b=JSON.parse('{"title":"二、Git 开发流程","description":"","frontmatter":{},"headers":[],"relativePath":"docs/00 创作中/Git 操作规范.md","filePath":"docs/00 创作中/Git 操作规范.md"}'),r={name:"docs/00 创作中/Git 操作规范.md"},a=o('<h2 id="一、git-分支管理规范" tabindex="-1">一、Git 分支管理规范 <a class="header-anchor" href="#一、git-分支管理规范" aria-label="Permalink to &quot;一、Git 分支管理规范&quot;">​</a></h2><table><thead><tr><th><strong>分支类型</strong></th><th><strong>来源分支</strong></th><th><strong>主要作用</strong></th><th><strong>使用场景</strong></th><th><strong>生命周期</strong></th></tr></thead><tbody><tr><td><code>**feature/xxx**</code></td><td><code>**develop**</code></td><td>开发新功能或实验性改动</td><td>从 <code>**develop**</code> 创建，完成功能后合并回 <code>**develop**</code>（如 <code>**feature/assign**</code>）</td><td>功能开发完成后删除</td></tr><tr><td><code>**develop**</code></td><td><code>**master**</code></td><td>集成所有新功能的开发主线</td><td>日常开发基准分支，接收 <code>**feature**</code> 分支的合并，发布时创建 <code>**release**</code> 分支</td><td>长期存在</td></tr><tr><td><code>**release**</code></td><td><code>**develop**</code></td><td>版本发布前的测试和修复</td><td>从 <code>**develop**</code> 创建（如 <code>**release/v1.0**</code>），修复 Bug 后合并到 <code>**master**</code> 并打标签</td><td>发布完成后删除</td></tr><tr><td><code>**master**</code></td><td>初始分支</td><td>生产环境的稳定代码</td><td>仅接收 <code>**release**</code> 或 <code>**hotfix**</code> 分支的合并，每次合并后打标签（如 <code>**v1.0.0**</code>）</td><td>长期存在</td></tr><tr><td><code>**hotfix**</code></td><td><code>**master**</code></td><td>紧急修复生产环境 Bug</td><td>从 <code>**master**</code> 创建（如 <code>**hotfix/fix-param**</code>），修复后同步到 <code>**develop**</code> 避免遗漏</td><td>修复完成后删除</td></tr><tr><td><code>**tag**</code></td><td><code>**master**</code></td><td>标记版本快照</td><td>在 <code>**master**</code> 分支发布时打标签（如 <code>**git tag -a v1.0.0**</code>），便于回滚和版本追踪</td><td>永久保留</td></tr></tbody></table><h1 id="二、git-开发流程" tabindex="-1">二、Git 开发流程 <a class="header-anchor" href="#二、git-开发流程" aria-label="Permalink to &quot;二、Git 开发流程&quot;">​</a></h1><h1 id="二、git-提交日志规范" tabindex="-1">二、Git 提交日志规范 <a class="header-anchor" href="#二、git-提交日志规范" aria-label="Permalink to &quot;二、Git 提交日志规范&quot;">​</a></h1><ul><li><p>type(PR 的类型):</p><ul><li><p>feat: 新功能</p></li><li><p>fix: 修复</p></li><li><p>docs: 文档（documentation）</p></li><li><p>refactor: 代码重构</p></li><li><p>test: 测试用例相关修改</p></li><li><p>chore: 构建过程或辅助工具的变动 ，比如Makefile,Dockerfile等</p></li><li><p>revert: 撤销，版本回退</p></li><li><p>perf: 性能优化</p></li><li><p>improvement: 改进</p></li><li><p>build: 打包</p></li><li><p>ci: 持续集成</p></li></ul></li></ul><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>原子提交</td><td>每个提交<strong>仅包含一个修改</strong>，且<strong>必须包含该修改所有的相关内容</strong></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>确保你的提交是「」</p><p><a href="https://github.com/burningmyself/burningmyself.github.io/blob/master/docs/tool/gitcmr.md#gcm008-%E7%A1%AE%E4%BF%9D%E4%BD%A0%E7%9A%84%E6%8F%90%E4%BA%A4%E6%98%AF%E5%8E%9F%E5%AD%90%E6%8F%90%E4%BA%A4" target="_blank" rel="noreferrer"></a></p><p>「原子提交」指的是。因此，你不可以：</p><ul><li><p>提交中混合与提交目的不相关的提交内容；</p></li><li><p>提交不完整的内容，甚至导致代码不能正常编译的内容；</p></li><li><p>在一个较大的修改提交中「隐藏」一些很小的代码改动。</p></li></ul><p>使用<code>git add -p</code>命令，可以帮助你较方便的将你的提交整理成一个个小的的「原子提交」。</p><h1 id="四、git-操作命令" tabindex="-1">四、Git 操作命令 <a class="header-anchor" href="#四、git-操作命令" aria-label="Permalink to &quot;四、Git 操作命令&quot;">​</a></h1><h2 id="_1、开发" tabindex="-1">1、开发 <a class="header-anchor" href="#_1、开发" aria-label="Permalink to &quot;1、开发&quot;">​</a></h2><p>cherry pick</p><p>git log</p><p>开始 Feature<br> 通过 develop 新建 feaeure 分支<br> git checkout -b feature develop<br> 或者, 推送至远程服务器:<br> git push -u origin feature<br> 修改 md 文件<br> git status<br> git add .<br> git commit</p><p>完成 Feature<br> git pull origin develop<br> git checkout develop<br> --no-ff：不使用 fast-forward 方式合并，保留分支的 commit 历史<br> --squash：使用 squash 方式合并，把多次分支 commit 历史压缩为一次<br> git merge --no-ff feature<br> git push origin develop<br> git branch -d some-feature<br> 如果需要删除远程 feature 分支:<br> git push origin --delete feature</p>',17),i=[a];function c(l,p,s,h,n,g){return d(),e("div",null,i)}const f=t(r,[["render",c]]);export{b as __pageData,f as default};
