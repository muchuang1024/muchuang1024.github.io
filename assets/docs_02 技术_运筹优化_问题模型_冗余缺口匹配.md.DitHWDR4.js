import{_,c as t,o as e,a4 as o}from"./chunks/framework.4aTu-Nia.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/02 技术/运筹优化/问题模型/冗余缺口匹配.md","filePath":"docs/02 技术/运筹优化/问题模型/冗余缺口匹配.md"}'),p={name:"docs/02 技术/运筹优化/问题模型/冗余缺口匹配.md"},i=o("<ul><li><p>无约束：简单计算 min(总冗余, 总缺口)</p></li><li><p>有约束：需要最大流算法</p></li><li><p>复杂度：从 O(1) 提升到 O(V²E)</p></li></ul><p>这就是为什么在实际应用中，约束的存在使得问题变得复杂，需要专门的算法来解决！</p><p>因为这是一个完全二分图，所有冗余点都可以连接到所有缺口点，所以：</p><ol><li><p>瓶颈在总容量：冗余点的总容量是限制因素</p></li><li><p>简单分配即可：直接将所有冗余容量分配给缺口点</p></li><li><p>算法复杂度：O(1) 而不是 O(V²E)</p></li></ol>",4),l=[i];function a(s,c,n,r,d,m){return e(),t("div",null,l)}const h=_(p,[["render",a]]);export{u as __pageData,h as default};
