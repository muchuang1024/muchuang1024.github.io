import{_ as a,c as e,o as t,a4 as i}from"./chunks/framework.4aTu-Nia.js";const q=JSON.parse('{"title":"Linux","description":"","frontmatter":{},"headers":[],"relativePath":"docs/02 技术/编程开发/linux.md","filePath":"docs/02 技术/编程开发/linux.md"}'),l={name:"docs/02 技术/编程开发/linux.md"},o=i(`<h1 id="linux" tabindex="-1">Linux <a class="header-anchor" href="#linux" aria-label="Permalink to &quot;Linux&quot;">​</a></h1><h2 id="文本处理" tabindex="-1">文本处理 <a class="header-anchor" href="#文本处理" aria-label="Permalink to &quot;文本处理&quot;">​</a></h2><h3 id="awk" tabindex="-1">awk <a class="header-anchor" href="#awk" aria-label="Permalink to &quot;awk&quot;">​</a></h3><ul><li><code>cat &lt;file&gt; | awk -F &#39;,&#39; &#39;BEGIN{print &quot;字段1&quot;,&quot;字段2&quot;} { print }&#39;</code> 输出表头</li><li><code>cat &lt;file&gt; | awk -F &#39;,&#39; &#39;{OFS=&quot;,&quot;; print $2,$1,0}</code> 每一行逗号拼接字符串</li><li><code>cat &lt;file&gt; | awk &#39;BEGIN{ORS=&quot;,&quot;}{ print }</code> 逗号连接多行</li><li><code>cat &lt;file&gt; | awk &#39;BEGIN{RS=&quot;,&quot;}{ print }</code> 逗号分隔字符串</li><li><code>cat &lt;file&gt; | awk -F &#39;,&#39; &#39;{ print NR, NF }&#39;</code> 查看行数、列数</li><li><code>cat &lt;file&gt; | awk -F &#39;,&#39; &#39;{count[$1]++} END {for(k in count) print k,count[k]}&#39;</code> 统计</li><li><code>cat &lt;file&gt; | awk -F &#39;,&#39; &#39;{ sum += $7; if (min == &quot;&quot;) min = max = $7; if ($7 &gt; max) max = $7; if ($7 &lt; min) min = $7 } END { print max, sum/NR, min }&#39;</code> 计算最大值、最小值、平均值</li></ul><h3 id="grep" tabindex="-1">grep <a class="header-anchor" href="#grep" aria-label="Permalink to &quot;grep&quot;">​</a></h3><ul><li><code>grep -v &quot;match_pattern&quot; &lt;file&gt;</code> 输出除了什么之外</li><li><code>grep -c &quot;match_pattern&quot; &lt;file&gt;</code> 输出包含字符行数</li><li><code>grep &quot;match_pattern&quot; . -r -n </code> 递归搜索文件</li><li><code>grep -E &quot;pattern1|pattern2&quot; &lt;file&gt;</code> 匹配多个样式</li><li><code>grep -F -v -f a.file b.file</code> 查询b-a差集</li></ul><h3 id="find" tabindex="-1">find <a class="header-anchor" href="#find" aria-label="Permalink to &quot;find&quot;">​</a></h3><ul><li><code>find . -type f -atime -7</code> 最近7天内被访问过的文件</li><li><code>find . -type f -atime 7</code> 7天前被访问过的文件</li><li><code>find . -type f -atime +7</code> 超过7天内被访问的文件</li><li><code>find . -type f -name &quot;*.txt&quot; -delete</code> 删除当前目录*.txt</li><li><code>find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot;</code> 获取多种后缀名文件</li></ul><h3 id="sort" tabindex="-1">sort <a class="header-anchor" href="#sort" aria-label="Permalink to &quot;sort&quot;">​</a></h3><ul><li><code>cat &lt;file&gt; | sort -t &#39;,&#39; -k 2 -rn</code> 文件逗号分隔，按照第2列纯数字逆序排序输出</li></ul><h3 id="sed" tabindex="-1">sed <a class="header-anchor" href="#sed" aria-label="Permalink to &quot;sed&quot;">​</a></h3><ul><li><code>sed &#39;/^$/d&#39; &lt;file&gt;</code> 删除空白行</li><li><code>sed &#39;2d&#39; &lt;file&gt;</code> 删除文件第2行</li><li><code>sed &#39;2,$d&#39; file</code> 删除文件第2到末尾所有行</li><li><code>sed &#39;$d&#39; file</code> 删除文件最后一行</li><li><code>sed &#39;s/book/books/g&#39; &lt;file&gt;</code> 替换文件的所有字符串</li><li><code>sed &#39;s/book/books/2g&#39; &lt;file&gt;</code> 从第N处匹配开始替换时替换文件的所有字符串</li><li><code>sed &#39;s/,/\\n/g&#39; &lt;file&gt;</code> 替换换行符</li><li><code>sed -i &#39;1i\\&lt;content&gt;&#39; &lt;file&gt;</code> 第1行插入</li><li><code>sed -i &#39;/^INFO/&#39;d &lt;file&gt;</code> 删除以INFO开头的文件</li></ul><h3 id="ls" tabindex="-1">ls <a class="header-anchor" href="#ls" aria-label="Permalink to &quot;ls&quot;">​</a></h3><ul><li><code>ls station_[0-9a-z]*_orders.txt</code> 查看文件</li><li><code>ls -l | grep &quot;^d&quot;</code> 只查看文件夹</li></ul><h3 id="uniq" tabindex="-1">uniq <a class="header-anchor" href="#uniq" aria-label="Permalink to &quot;uniq&quot;">​</a></h3><ul><li><code>cat &lt;file1&gt; &lt;file2&gt; | sort | uniq -u</code> 求文本差集</li><li><code>sort &lt;file&gt; | uniq -c</code> 计算行重复的次数</li><li><code>sort &lt;file&gt; | uniq -d</code> 仅显示重复行</li><li><code>sort &lt;file&gt; | uniq -u</code> 仅显示不重复行</li></ul><h3 id="tr" tabindex="-1">tr <a class="header-anchor" href="#tr" aria-label="Permalink to &quot;tr&quot;">​</a></h3><ul><li><code>cat &lt;file&gt; | tr a-z A-Z</code> 小写转大写</li><li><code>cat &lt;file&gt; | tr &quot;,&quot; &quot;\\t&quot;</code> 逗号分隔符转tab</li></ul><h3 id="cut" tabindex="-1">cut <a class="header-anchor" href="#cut" aria-label="Permalink to &quot;cut&quot;">​</a></h3><ul><li><code>echo $PATH | cut -d &#39;:&#39; -f 3,5</code> 提取第3和第5列</li></ul><h3 id="wc" tabindex="-1">wc <a class="header-anchor" href="#wc" aria-label="Permalink to &quot;wc&quot;">​</a></h3><ul><li><code>wc -l</code> 计算行数</li><li><code>wc -w</code> 计算单词数</li><li><code>wc -m</code> 计算字节数</li></ul><h3 id="zip" tabindex="-1">zip <a class="header-anchor" href="#zip" aria-label="Permalink to &quot;zip&quot;">​</a></h3><ul><li><code>zip -r &lt;file&gt;.zip &lt;file&gt;</code></li><li><code>unzip &lt;file&gt;.zip</code></li></ul><h3 id="tar" tabindex="-1">tar <a class="header-anchor" href="#tar" aria-label="Permalink to &quot;tar&quot;">​</a></h3><ul><li><code>tar -czvf file.gz &lt;file&gt;</code> 压缩</li><li><code>tar --exclude=&lt;dir&gt;/1.txt -czvf file.gz &lt;dir&gt;</code> 排除文件排除1.txt压缩</li><li><code>tar -tzvf file.gz</code> 列出压缩文件列表</li><li><code>tar -xzvf file.gz</code> 解压</li></ul><h3 id="rsync" tabindex="-1">rsync <a class="header-anchor" href="#rsync" aria-label="Permalink to &quot;rsync&quot;">​</a></h3><p>需要复制本机ssh公钥到远程机器</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cat ~/.ssh/id_rsa.pub &gt;&gt; authorized_keys</span></span></code></pre></div><ul><li><code>rsync --bwlimit=10000 -artP &lt;file&gt; -e &#39;ssh -p &lt;port&gt;&#39; root@&lt;ip&gt;:&lt;target_path&gt;</code> 从本地传输文件到远程机器</li><li><code>rsync --bwlimit=10000 -artP -e &#39;ssh -p &lt;port&gt;&#39; root@&lt;ip&gt;:&lt;source_path&gt; ./</code> 从远程机器拉取文件到本地</li></ul><h2 id="系统状态" tabindex="-1">系统状态 <a class="header-anchor" href="#系统状态" aria-label="Permalink to &quot;系统状态&quot;">​</a></h2><h3 id="负载" tabindex="-1">负载 <a class="header-anchor" href="#负载" aria-label="Permalink to &quot;负载&quot;">​</a></h3><ul><li><code>top</code></li><li><code>uptime</code></li></ul><h3 id="cpu" tabindex="-1">CPU <a class="header-anchor" href="#cpu" aria-label="Permalink to &quot;CPU&quot;">​</a></h3><ul><li><code>mpstat -P ALL</code> cpu各核使用率</li></ul><h3 id="内存" tabindex="-1">内存 <a class="header-anchor" href="#内存" aria-label="Permalink to &quot;内存&quot;">​</a></h3><ul><li><code>vmstat</code></li><li><code>free</code></li></ul><h3 id="网络" tabindex="-1">网络 <a class="header-anchor" href="#网络" aria-label="Permalink to &quot;网络&quot;">​</a></h3><ul><li><code>ss</code></li><li><code>ifstat</code> 网络io统计</li><li><code>netstat -nat | grep &lt;port&gt;</code> 指定端口的网络连接数</li><li><code>netstat -nat|awk &#39;{print $6}&#39;|sort|uniq -c|sort -rn</code> 网络连接各状态统计</li></ul><h3 id="磁盘" tabindex="-1">磁盘 <a class="header-anchor" href="#磁盘" aria-label="Permalink to &quot;磁盘&quot;">​</a></h3><ul><li><code>iostat</code> 磁盘io统计</li><li><code>iotop -o</code> 磁盘io占用top</li><li><code>du -sh ./* | sort -rn | head -n 10</code> 磁盘空间占用top10的文件</li></ul><h3 id="进程" tabindex="-1">进程 <a class="header-anchor" href="#进程" aria-label="Permalink to &quot;进程&quot;">​</a></h3><ul><li><code>pidstat</code></li><li><code>ps aux head -1; ps aux | sort -rn -k3 | head -n 10</code> cpu占用top10的进程</li><li><code>ps aux head -1; ps aux | sort -rn -k4 | head -n 10</code> 内存占用top10的进程</li><li><code>pidstat -d &lt;时间间隔&gt; -p &lt;进程id&gt;</code> 进程占用磁盘io</li><li><code>iftop</code></li><li><code>nethogs</code> 进程带宽</li></ul><h3 id="线程" tabindex="-1">线程 <a class="header-anchor" href="#线程" aria-label="Permalink to &quot;线程&quot;">​</a></h3><ul><li><code>ps hH p | grep &lt;pid&gt;</code> 查看进程的线程</li></ul><h2 id="系统监控" tabindex="-1">系统监控 <a class="header-anchor" href="#系统监控" aria-label="Permalink to &quot;系统监控&quot;">​</a></h2><h3 id="进程内存监控" tabindex="-1">进程内存监控 <a class="header-anchor" href="#进程内存监控" aria-label="Permalink to &quot;进程内存监控&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># !/bin/sh</span></span>
<span class="line"><span># 内存是$4，cpu是$3，$2是进程号，内存&gt;5%</span></span>
<span class="line"><span>pids=ps aux | grep &lt;progress&gt; | grep -v grep | awk &#39;{if($4&gt;=5)print $2}&#39; </span></span>
<span class="line"><span>for pid in pids; </span></span>
<span class="line"><span>   do kill -9 $pid echo date +&#39;%F %T&#39; $pid &gt;&gt;/var/log/kill.log </span></span>
<span class="line"><span>done</span></span></code></pre></div><h3 id="网络带宽监控" tabindex="-1">网络带宽监控 <a class="header-anchor" href="#网络带宽监控" aria-label="Permalink to &quot;网络带宽监控&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span></code></pre></div><h3 id="磁盘空间监控" tabindex="-1">磁盘空间监控 <a class="header-anchor" href="#磁盘空间监控" aria-label="Permalink to &quot;磁盘空间监控&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#!/bin/sh </span></span>
<span class="line"><span></span></span>
<span class="line"><span>diskinfo=&quot;/tmp/diskinfo.txt&quot;</span></span>
<span class="line"><span>for d in \`df -P | grep /dev | awk &#39;{print $5}&#39;| sed &#39;s/%//g&#39;\`</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>    if [ $d -gt 90 ];then</span></span>
<span class="line"><span>        df -h&gt;&gt;$diskinfo;</span></span>
<span class="line"><span>        #sendmail</span></span>
<span class="line"><span>        mutt -s &quot;disk warining!&quot; &quot;1399534656@qq.com&quot; &lt;\${diskinfo} -a \${diskinfo}</span></span>
<span class="line"><span>        exit 0;</span></span>
<span class="line"><span>    fi</span></span>
<span class="line"><span>done</span></span></code></pre></div><h2 id="性能排查" tabindex="-1">性能排查 <a class="header-anchor" href="#性能排查" aria-label="Permalink to &quot;性能排查&quot;">​</a></h2><p>排查引起系统变慢/网络超时的原因</p><h3 id="cpu高" tabindex="-1">cpu高 <a class="header-anchor" href="#cpu高" aria-label="Permalink to &quot;cpu高&quot;">​</a></h3><h3 id="内存高" tabindex="-1">内存高 <a class="header-anchor" href="#内存高" aria-label="Permalink to &quot;内存高&quot;">​</a></h3><h3 id="网络带宽高" tabindex="-1">网络带宽高 <a class="header-anchor" href="#网络带宽高" aria-label="Permalink to &quot;网络带宽高&quot;">​</a></h3><h3 id="磁盘io高" tabindex="-1">磁盘IO高 <a class="header-anchor" href="#磁盘io高" aria-label="Permalink to &quot;磁盘IO高&quot;">​</a></h3><h3 id="gc耗时高" tabindex="-1">GC耗时高 <a class="header-anchor" href="#gc耗时高" aria-label="Permalink to &quot;GC耗时高&quot;">​</a></h3>`,59),s=[o];function n(d,c,r,h,p,u){return t(),e("div",null,s)}const g=a(l,[["render",n]]);export{q as __pageData,g as default};
