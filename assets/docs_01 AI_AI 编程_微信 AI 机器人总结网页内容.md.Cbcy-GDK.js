import{_ as a,c as n,o as s,a4 as e}from"./chunks/framework.4aTu-Nia.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/01 AI/AI 编程/微信 AI 机器人总结网页内容.md","filePath":"docs/01 AI/AI 编程/微信 AI 机器人总结网页内容.md"}'),p={name:"docs/01 AI/AI 编程/微信 AI 机器人总结网页内容.md"},i=e(`<p>在信息爆炸的时代，面对浩如烟海的微信消息和纷繁复杂的网页内容，我们常常感到力不从心。如何从这些信息洪流中高效提炼出核心内容，成为我们迫切需要解决的问题。</p><p>这时，微信 AI 机器人应运而生，它不仅能够智能总结文件，还能快速阅读网页，为我们提供精准的信息摘要。想象一下，只需将需要提炼总结的网页或者文件发送给 AI 机器人，就能帮你自动总结摘要，这将是怎样的便利与高效？</p><p>这一篇分享下 AI 微信机器人进阶篇，完成发送文章链接自动总结功能</p><h2 id="一、效果展示" tabindex="-1">一、效果展示 <a class="header-anchor" href="#一、效果展示" aria-label="Permalink to &quot;一、效果展示&quot;">​</a></h2><h3 id="_1、不同群聊配置不同的机器人" tabindex="-1">1、不同群聊配置不同的机器人 <a class="header-anchor" href="#_1、不同群聊配置不同的机器人" aria-label="Permalink to &quot;1、不同群聊配置不同的机器人&quot;">​</a></h3><p>机器人的角色是微信群配置的 LinkAI 应用的人设</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20240511235809.png" alt=""></p><h3 id="_2、自动阅读网页内容并总结" tabindex="-1">2、自动阅读网页内容并总结 <a class="header-anchor" href="#_2、自动阅读网页内容并总结" aria-label="Permalink to &quot;2、自动阅读网页内容并总结&quot;">​</a></h3><p>机器人使用了微信群配置的 LinkAI 应用的插件：网页阅读，进行内容总结</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20240512000009.png" alt=""></p><h2 id="二、搭建-linkai-应用" tabindex="-1">二、搭建 LinkAI 应用 <a class="header-anchor" href="#二、搭建-linkai-应用" aria-label="Permalink to &quot;二、搭建 LinkAI 应用&quot;">​</a></h2><p>LinkAI 是一站式 AI 智能体搭建平台，可以理解为对 AI 大模型的封装，要完成总结网页功能，需要用到 LinkAI，LinkAI 核心能力之一就是自动总结文件、网页内容、在线搜索</p><h3 id="_1、注册-linkai" tabindex="-1">1、注册 LinkAI <a class="header-anchor" href="#_1、注册-linkai" aria-label="Permalink to &quot;1、注册 LinkAI&quot;">​</a></h3><p>访问 <a href="https://link-ai.tech/home" target="_blank" rel="noreferrer">LinkAI 官网</a> ，使用微信或者手机号完成注册，新用户注册后可以获得 300 积分，每日签到可额外获得积分</p><h3 id="_2、创建普通机器人" tabindex="-1">2、创建普通机器人 <a class="header-anchor" href="#_2、创建普通机器人" aria-label="Permalink to &quot;2、创建普通机器人&quot;">​</a></h3><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20240511221640.png" alt=""></p><p>普通机器人选择轻应用即可，填写应用名称和应用描述后，可使用AI一键填写</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20240511222145.png" alt="image.png"></p><p>应用创建成功后，点击确认按钮会进入应用配置和应用接入页面</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20240511223245.png" alt=""></p><p>一般只需要配置如下选项：</p><p>开场介绍：首次进入对话时，智能助手向用户发送的第一条消息 模型设置：选择大模型 应用设定：模型角色设定，即提示词 插件配置：具备的插件技能，开启网页速读可以根据链接访问内容</p><p>配置后上面的信息后，右边可以进行调试，符合预期效果后，可以接入其它三方应用</p><h3 id="_3、获取-api-key-和应用-code" tabindex="-1">3、获取 API key 和应用 Code <a class="header-anchor" href="#_3、获取-api-key-和应用-code" aria-label="Permalink to &quot;3、获取 API key 和应用 Code&quot;">​</a></h3><p>1）获取 API key</p><p>LinkAPI 的API key（类似 gpt、xunfei 等），刚进来时没有 API Key，可以点击按钮创建</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20240511233127.png" alt=""></p><p>2）获取应用 Code</p><p>不同群聊可以配置不同类型的机器人，如果某个群聊没有出现在插件配置文件中时，将默认使用 LINKALAPP_CODE 对应的应用 Code</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20240511233207.png" alt=""></p><h2 id="三、服务搭建" tabindex="-1">三、服务搭建 <a class="header-anchor" href="#三、服务搭建" aria-label="Permalink to &quot;三、服务搭建&quot;">​</a></h2><p>搭建过程和上一篇完全一样，只需要修改几个配置参数</p><p>1）修改根目录 config.json</p><p>配置 use_linkai、linkai_api_key、linkai_app_code</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&quot;use_linkai&quot;: True,</span></span>
<span class="line"><span>&quot;linkai_api_key&quot;: &quot;&quot;,  #API key</span></span>
<span class="line"><span>&quot;linkai_app_code&quot;: &quot;&quot;, #默认应用的code，当私聊时，或者在某个群聊没有出现在插件配置文件中时，将默认使用 LINKALAPP_CODE 对应的应用</span></span></code></pre></div><p>2）增加 plugins/linkai/config.json</p><p>将 <code>plugins/linkai</code> 目录下的 <code>config.json.template</code> 配置模板复制为最终生效的 <code>plugins/linkai/config.json</code></p><p>并设置如下参数，配置微信群对应的 LinkAI 应用，并设置开启对文件和网页进行总结</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;group_app_map&quot;: {</span></span>
<span class="line"><span>      &quot;AI 机器人测试&quot;: &quot;JY9kReJl&quot;</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;summary&quot;: {</span></span>
<span class="line"><span>        &quot;enabled&quot;: true, # 文档总结开关</span></span>
<span class="line"><span>        &quot;group_enabled&quot;: true, # 群聊文档总结开关</span></span>
<span class="line"><span>        &quot;max_file_size&quot;: 5000, # 文件的大小限制，单位KB，默认为5M，超过该大小直接忽略</span></span>
<span class="line"><span>        &quot;type&quot;: [&quot;FILE&quot;, &quot;SHARING&quot;, &quot;IMAGE&quot;] # 支持总结的类型，文件、分享链接、图片</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>功能开启后，向机器人发送 <strong>文件</strong>、 <strong>分享链接卡片</strong>、<strong>图片</strong> 即可生成摘要，进一步可以与文件或链接的内容进行多轮对话。如果需要关闭某种类型的内容总结，设置 <code>summary</code>配置中的 type 字段。</p><p>文件目前 支持 <code>txt</code>, <code>docx</code>, <code>pdf</code>, <code>md</code>, <code>csv</code>格式，文件大小由 <code>max_file_size</code> 限制，最大不超过15M，文件字数最多可支持百万字的文件。但不建议上传字数过多的文件，一是token消耗过大，二是摘要很难覆盖到全部内容，只能通过多轮对话来了解细节。</p><p>总结及对话的费用与 LinkAI 3.5-4K 模型的计费方式相同，按文档内容的 tokens 进行计算</p><h2 id="四、总结" tabindex="-1">四、总结 <a class="header-anchor" href="#四、总结" aria-label="Permalink to &quot;四、总结&quot;">​</a></h2><p>本文主要介绍了 利用 LinkAI 平台搭建一个能够自动阅读网页内容并总结的微信 AI 机器人。文章分为三个部分：</p><p>1、<strong>效果展示</strong>：展示了如何为不同的群聊配置不同的机器人角色，并演示了机器人如何使用网页阅读插件进行内容总结。</p><p>2、 <strong>搭建 LinkAI 应用</strong>：详细介绍了如何在LinkAI平台注册账号、创建普通机器人，并配置应用，包括选择大模型、应用角色设定，以及插件配置，特别是开启网页速读功能。</p><p>3、<strong>服务搭建</strong>：说明了如何修改服务配置，包括在<code>config.json</code>中设置<code>use_linkai</code>、<code>linkai_api_key</code>、<code>linkai_app_code</code>，以及如何为不同群聊配置机器人，并配置微信群对应的LinkAI 应用，开启网页和文件总结功能。</p><p>文章提供了一个详细、实用的指南，帮助读者将一个普通的微信号升级为能够自动阅读网页内容并总结的 AI 机器人，以提升用户在信息提取和处理上的效率</p>`,48),o=[i];function t(c,l,r,d,u,h){return s(),n("div",null,o)}const k=a(p,[["render",t]]);export{g as __pageData,k as default};
