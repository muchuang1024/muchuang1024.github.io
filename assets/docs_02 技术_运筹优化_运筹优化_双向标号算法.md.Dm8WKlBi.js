import{_ as a,c as t,o as e,a4 as o}from"./chunks/framework.4aTu-Nia.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/02 技术/运筹优化/运筹优化/双向标号算法.md","filePath":"docs/02 技术/运筹优化/运筹优化/双向标号算法.md"}'),r={name:"docs/02 技术/运筹优化/运筹优化/双向标号算法.md"},l=o('<p>双向标号法（Bidirectional Labeling Method）是一种常用于图算法中的方法，特别是在最短路径问题中。其主要思想是同时从起点和终点出发，进行搜索，直到两个搜索过程相遇，从而避免单纯从起点或者终点单向扩展时可能会出现的搜索过程较长的问题。这种算法可以减少搜索空间，因为它同时从两个方向搜索，可以更快地找到解决方案。</p><p>双向标号法的原理可以总结为以下几个步骤：</p><h2 id="算法原理" tabindex="-1">算法原理 <a class="header-anchor" href="#算法原理" aria-label="Permalink to &quot;算法原理&quot;">​</a></h2><h3 id="_1-初始化" tabindex="-1">1. <strong>初始化：</strong> <a class="header-anchor" href="#_1-初始化" aria-label="Permalink to &quot;1. **初始化：**&quot;">​</a></h3><ul><li>假设我们有一个带权图，图中的节点表示不同的状态或位置，边表示状态之间的转移关系，边的权重表示转移的代价。</li><li>从起点 SSS 和终点 TTT 分别开始搜索。为每个节点分配一个标号（通常是距离起点或终点的距离）。</li></ul><h3 id="_2-双向搜索" tabindex="-1">2. <strong>双向搜索：</strong> <a class="header-anchor" href="#_2-双向搜索" aria-label="Permalink to &quot;2. **双向搜索：**&quot;">​</a></h3><ul><li><strong>正向搜索</strong>：从起点 SSS 开始，通过图中的边进行遍历，逐步向目标节点扩展，同时更新节点的距离（标号）。</li><li><strong>反向搜索</strong>：从终点 TTT 开始，同样通过图中的边进行遍历，逐步向起点扩展，也更新节点的距离。</li></ul><h3 id="_3-搜索扩展" tabindex="-1">3. <strong>搜索扩展：</strong> <a class="header-anchor" href="#_3-搜索扩展" aria-label="Permalink to &quot;3. **搜索扩展：**&quot;">​</a></h3><ul><li>在每一步扩展中，选择当前已标号节点的邻接节点，并进行更新。如果一个节点同时被正向和反向搜索的过程访问到，则认为两个搜索过程相遇，此时可以计算出最短路径。</li></ul><h3 id="_4-路径重构" tabindex="-1">4. <strong>路径重构：</strong> <a class="header-anchor" href="#_4-路径重构" aria-label="Permalink to &quot;4. **路径重构：**&quot;">​</a></h3><ul><li>一旦两个搜索过程相遇，可以从起点到该相遇节点以及从终点到相遇节点的路径进行重构，从而得到起点到终点的最短路径。</li></ul><h3 id="_5-优化" tabindex="-1">5. <strong>优化：</strong> <a class="header-anchor" href="#_5-优化" aria-label="Permalink to &quot;5. **优化：**&quot;">​</a></h3><ul><li>双向标号法通过从两个方向进行搜索，大大减少了搜索的时间复杂度。传统的单向搜索方法可能需要遍历整个图，而双向搜索只需要分别从起点和终点向中间扩展，这通常能够显著减少搜索空间。</li></ul><h3 id="_6-终止条件" tabindex="-1">6. <strong>终止条件：</strong> <a class="header-anchor" href="#_6-终止条件" aria-label="Permalink to &quot;6. **终止条件：**&quot;">​</a></h3><ul><li>搜索过程在两个方向相遇时终止，这时可以得到从起点到终点的最短路径。具体的终止条件通常是某个方向的搜索树中某个节点被另一个方向的搜索树标号所覆盖。</li></ul>',15),i=[l];function n(s,_,h,d,c,u){return e(),t("div",null,i)}const b=a(r,[["render",n]]);export{m as __pageData,b as default};
