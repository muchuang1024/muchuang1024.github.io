import{_ as a,c as t,o as e,a4 as n}from"./chunks/framework.4aTu-Nia.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/00 创作中/IDEA.md","filePath":"docs/00 创作中/IDEA.md"}'),s={name:"docs/00 创作中/IDEA.md"},o=n(`<p>配置命令后，在项目根路径下，可以使用命令：idea . 快速打开项目</p><p>步骤1: 先打开idea</p><p>步骤2：选择 Tools &gt; Create Commandline Launcher</p><p>步骤3：配置路径：/usr/local/bin/idea</p><table><thead><tr><th style="text-align:left;">指令</th><th>标题</th><th>源</th></tr></thead><tbody><tr><td style="text-align:left;">Ctrl + Shift + ]</td><td>转到定义 Go To Declaration</td><td>默认</td></tr><tr><td style="text-align:left;">Ctrl + ]</td><td>转到实现 Go To Implementation</td><td></td></tr><tr><td style="text-align:left;">Ctrl + [</td><td>返回上一级 Go Back</td><td></td></tr><tr><td style="text-align:left;"></td><td></td><td></td></tr><tr><td style="text-align:left;"></td><td></td><td></td></tr></tbody></table><p>注释格式：将注释符号放置在当前行的第一个字符而不是行首</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20250101202123.png" alt=""></p><h2 id="快速搜索" tabindex="-1">快速搜索 <a class="header-anchor" href="#快速搜索" aria-label="Permalink to &quot;快速搜索&quot;">​</a></h2><p>Shift + Shift</p><h2 id="剪切板复制" tabindex="-1">剪切板复制 <a class="header-anchor" href="#剪切板复制" aria-label="Permalink to &quot;剪切板复制&quot;">​</a></h2><p>Command + Shift +V 可以输入关键词搜索相关的记录</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20250405092151.png" alt=""></p><h2 id="查看最近编辑文件" tabindex="-1">查看最近编辑文件 <a class="header-anchor" href="#查看最近编辑文件" aria-label="Permalink to &quot;查看最近编辑文件&quot;">​</a></h2><p>Command + e</p><h2 id="放大缩小" tabindex="-1">放大缩小 <a class="header-anchor" href="#放大缩小" aria-label="Permalink to &quot;放大缩小&quot;">​</a></h2><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20250405095135.png" alt=""></p><h2 id="快速定位文件位置" tabindex="-1">快速定位文件位置 <a class="header-anchor" href="#快速定位文件位置" aria-label="Permalink to &quot;快速定位文件位置&quot;">​</a></h2><p>快速定位文件位置和复制文件路径</p><p><a href="https://blog.csdn.net/u011628753/article/details/136700073" target="_blank" rel="noreferrer">https://blog.csdn.net/u011628753/article/details/136700073</a></p><h2 id="单步调试" tabindex="-1">单步调试 <a class="header-anchor" href="#单步调试" aria-label="Permalink to &quot;单步调试&quot;">​</a></h2><p>找到 Test 文件中要执行的函数，鼠标 Hover 上去选择 Debug</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20241209154556.png" alt=""></p><p>常见调试：</p><p>1、Step Into：快捷键 fn + F7。</p><p>一步步按照代码的执行顺序自上而下执行，遇到子函数则跳转到子函数内部执行。最基础的单步调试。</p><p>2、Step Over：快捷键 fn + F8。</p><p>Step Over与Step Into最大不同是，如果当前代码是一个子函数，Step Inot则跳转进入子函数，而Step Over则不进入子函数，相当于把跳转子函数的那段代码当做普通代码单步执行。换言之，加上没有子函数跳转，代码均是在当前函数体内一行一行的调试，那么Step Into和Step Over功效相同，只有在当前一行代码是子函数跳转入口函数时候，Step Into和Step Over表现不同。</p><p>3、Step Out：快捷键 fn + Shift + F8。</p><p>断点调试时候，当运行进入一个函数内以后，如果不想继续在这个子函数内兜兜转、转圈圈（尤其是子函数存在循环耗时代码逻辑时候），可以用Step Out跳出当前子函数，比较类似于在编程时候，一条return语句，返回（跳出）当前函数。</p><p>4、Run to Cursor：快捷键 fn + Alt + F9。</p><p>断点单步调试，顾名思义就是一步一步的调试代码，但有时候基本已经确定问题代码在那里，需要快速调试到问题代码或问题附近的代码，不想在正常代码处一步一步耽搁时间，Run to Cursor 就满足了这个功能。先把光标移动到定位的代码地方，然后执行 Run to Cursor。</p><p>5、<strong>带条件的断点</strong></p><p>打一个断点，鼠标右键断点，编写调试条件</p><p>6、**断点回退</p><p>只能用在方法里面使用</p><p>打一个断点，Step Into进入方法后，点击Step Over,我们可以看到，左下角框有Reset Frame(断点回退)，点一下它，就回到之前执行断点之前的位置，再次重复该操作，查看控制台输出内容。</p><h2 id="快捷键" tabindex="-1">快捷键 <a class="header-anchor" href="#快捷键" aria-label="Permalink to &quot;快捷键&quot;">​</a></h2><p>CTRL + L 展开文件 CTRL + J 折叠文件</p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><h3 id="_1、自动导包" tabindex="-1">1、自动导包 <a class="header-anchor" href="#_1、自动导包" aria-label="Permalink to &quot;1、自动导包&quot;">​</a></h3><p>编写类时自动导入类</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Map map = new HashMap();// 自动import java.util.HashMap;</span></span></code></pre></div><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20250403105506.png" alt=""></p><h3 id="_2、后缀补全" tabindex="-1">2、后缀补全 <a class="header-anchor" href="#_2、后缀补全" aria-label="Permalink to &quot;2、后缀补全&quot;">​</a></h3><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20250403110836.png" alt=""></p><h2 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h2><h3 id="lombok" tabindex="-1">lombok <a class="header-anchor" href="#lombok" aria-label="Permalink to &quot;lombok&quot;">​</a></h3><p>自动生成实体类中的 setter 和 getter 方法</p><p>pom.xml 引入依赖</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;dependency&gt;  </span></span>
<span class="line"><span>    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;  </span></span>
<span class="line"><span>    &lt;artifactId&gt;lombok&lt;/artifactId&gt;  </span></span>
<span class="line"><span>    &lt;version&gt;1.18.20&lt;/version&gt;  </span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><p>代码使用 @Data</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>import lombok.Data;</span></span>
<span class="line"><span>@Data</span></span></code></pre></div><h3 id="generateallsetter" tabindex="-1">GenerateAllSetter <a class="header-anchor" href="#generateallsetter" aria-label="Permalink to &quot;GenerateAllSetter&quot;">​</a></h3><p>自动补充创建对象的 setter 方法</p><p>Mac: Option + 回车 Windows: Alt + 回车</p><h3 id="gsonformat" tabindex="-1">GsonFormat <a class="header-anchor" href="#gsonformat" aria-label="Permalink to &quot;GsonFormat&quot;">​</a></h3><p>根据 json 格式的数据自动生成实体类</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>	id: &quot;1&quot;,</span></span>
<span class="line"><span>	&quot;name&quot;: &quot;test&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Mac: 创建好空类后，使用 Option + s 弹窗输入 json 自动生成实体类</p><h3 id="restfultoolkit-fix" tabindex="-1">RestfulToolkit-fix <a class="header-anchor" href="#restfultoolkit-fix" aria-label="Permalink to &quot;RestfulToolkit-fix&quot;">​</a></h3><p>自动显示工程中的所有 URL接口，并支持进行测试，并且提供检索的功能</p><p>Ctrl + Option + /</p><h3 id="plantuml" tabindex="-1">plantuml <a class="header-anchor" href="#plantuml" aria-label="Permalink to &quot;plantuml&quot;">​</a></h3><p>通过编写文本的方式绘制时序图</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20241209152438.png" alt=""></p><p>设置主题：</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20241209152318.png" alt=""></p><h3 id="diagram" tabindex="-1">Diagram <a class="header-anchor" href="#diagram" aria-label="Permalink to &quot;Diagram&quot;">​</a></h3><p>根据代码自动生成类图</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20241209171344.png" alt=""></p><h3 id="sequencediagram" tabindex="-1">SequenceDiagram <a class="header-anchor" href="#sequencediagram" aria-label="Permalink to &quot;SequenceDiagram&quot;">​</a></h3><p>根据代码自动生成时序图</p><p>点击图上的元素可以跳转到代码里面</p><h3 id="translation" tabindex="-1">Translation <a class="header-anchor" href="#translation" aria-label="Permalink to &quot;Translation&quot;">​</a></h3><p>代码翻译</p><h3 id="key-promoter-x" tabindex="-1">Key Promoter X <a class="header-anchor" href="#key-promoter-x" aria-label="Permalink to &quot;Key Promoter X&quot;">​</a></h3><p>快捷键提示插件</p><h3 id="codeglance-pro" tabindex="-1">CodeGlance PRO <a class="header-anchor" href="#codeglance-pro" aria-label="Permalink to &quot;CodeGlance PRO&quot;">​</a></h3><p>代码地图</p><h3 id="rainbow-brackets" tabindex="-1">Rainbow Brackets <a class="header-anchor" href="#rainbow-brackets" aria-label="Permalink to &quot;Rainbow Brackets&quot;">​</a></h3><p>彩虹括号</p><p><img src="https://muchuang-img.oss-cn-beijing.aliyuncs.com/20250404195638.png" alt=""></p>`,82),i=[o];function p(l,r,c,h,d,u){return e(),t("div",null,i)}const b=a(s,[["render",p]]);export{g as __pageData,b as default};
